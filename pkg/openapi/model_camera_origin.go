/*
connect-api

# API Rules * Null values are not sent / received. * Object IDs are **always** sent in list methods, but are **ignored** in create / update methods. * All request and response objects are at the root of the returned structure, if they contain only one entity. * Response of multiple entities is returned as an object that contains the list of entities and a structure `pager`, if necessary. ### Additional documentation: * [Camera registration](../camera_registration/) * [Camera communication](../camera_communication/) ### HTTP Status * 200 - OK, response contains data (usually the entire entity) * 201 - OK, entry created; response contains data as required * 204 - OK, no response * 304 - Response has not been modified * 400 - Invalid request / invalid input (SDK error) * 401 - Endpoint is being accessed without credentials (SDK error) * 403 - Request can't be served, usually due to insufficient rights (user error) * 404 - Entity not found (user error or outdated data) * 409 - Conflict with the state of target resource (user error) * 50x - Server side error

API version: 0.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CameraOrigin Camera origin whether it is registered by web (WEB) or by printer (LINK) or manually via camera api (OTHER)
type CameraOrigin string

// List of camera_origin
const (
	LINK CameraOrigin = "LINK"
	WEB CameraOrigin = "WEB"
	OTHER CameraOrigin = "OTHER"
)

// All allowed values of CameraOrigin enum
var AllowedCameraOriginEnumValues = []CameraOrigin{
	"LINK",
	"WEB",
	"OTHER",
}

func (v *CameraOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CameraOrigin(value)
	for _, existing := range AllowedCameraOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CameraOrigin", value)
}

// NewCameraOriginFromValue returns a pointer to a valid CameraOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCameraOriginFromValue(v string) (*CameraOrigin, error) {
	ev := CameraOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CameraOrigin: valid values are %v", v, AllowedCameraOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CameraOrigin) IsValid() bool {
	for _, existing := range AllowedCameraOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to camera_origin value
func (v CameraOrigin) Ptr() *CameraOrigin {
	return &v
}

type NullableCameraOrigin struct {
	value *CameraOrigin
	isSet bool
}

func (v NullableCameraOrigin) Get() *CameraOrigin {
	return v.value
}

func (v *NullableCameraOrigin) Set(val *CameraOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableCameraOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableCameraOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCameraOrigin(val *CameraOrigin) *NullableCameraOrigin {
	return &NullableCameraOrigin{value: val, isSet: true}
}

func (v NullableCameraOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCameraOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

