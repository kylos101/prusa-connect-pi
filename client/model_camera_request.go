/*
connect-api

# API Rules * Null values are not sent / received. * Object IDs are **always** sent in list methods, but are **ignored** in create / update methods. * All request and response objects are at the root of the returned structure, if they contain only one entity. * Response of multiple entities is returned as an object that contains the list of entities and a structure `pager`, if necessary. ### Additional documentation: * [Camera registration](../camera_registration/) * [Camera communication](../camera_communication/) ### HTTP Status * 200 - OK, response contains data (usually the entire entity) * 201 - OK, entry created; response contains data as required * 204 - OK, no response * 304 - Response has not been modified * 400 - Invalid request / invalid input (SDK error) * 401 - Endpoint is being accessed without credentials (SDK error) * 403 - Request can't be served, usually due to insufficient rights (user error) * 404 - Entity not found (user error or outdated data) * 409 - Conflict with the state of target resource (user error) * 50x - Server side error

API version: 0.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CameraRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CameraRequest{}

// CameraRequest struct for CameraRequest
type CameraRequest struct {
	Config CameraConfig `json:"config"`
	Options *CameraOptions `json:"options,omitempty"`
	Capabilities []string `json:"capabilities,omitempty"`
}

type _CameraRequest CameraRequest

// NewCameraRequest instantiates a new CameraRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCameraRequest(config CameraConfig) *CameraRequest {
	this := CameraRequest{}
	this.Config = config
	return &this
}

// NewCameraRequestWithDefaults instantiates a new CameraRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCameraRequestWithDefaults() *CameraRequest {
	this := CameraRequest{}
	return &this
}

// GetConfig returns the Config field value
func (o *CameraRequest) GetConfig() CameraConfig {
	if o == nil {
		var ret CameraConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *CameraRequest) GetConfigOk() (*CameraConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *CameraRequest) SetConfig(v CameraConfig) {
	o.Config = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CameraRequest) GetOptions() CameraOptions {
	if o == nil || IsNil(o.Options) {
		var ret CameraOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraRequest) GetOptionsOk() (*CameraOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CameraRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given CameraOptions and assigns it to the Options field.
func (o *CameraRequest) SetOptions(v CameraOptions) {
	o.Options = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *CameraRequest) GetCapabilities() []string {
	if o == nil || IsNil(o.Capabilities) {
		var ret []string
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraRequest) GetCapabilitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *CameraRequest) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []string and assigns it to the Capabilities field.
func (o *CameraRequest) SetCapabilities(v []string) {
	o.Capabilities = v
}

func (o CameraRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CameraRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	return toSerialize, nil
}

func (o *CameraRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCameraRequest := _CameraRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCameraRequest)

	if err != nil {
		return err
	}

	*o = CameraRequest(varCameraRequest)

	return err
}

type NullableCameraRequest struct {
	value *CameraRequest
	isSet bool
}

func (v NullableCameraRequest) Get() *CameraRequest {
	return v.value
}

func (v *NullableCameraRequest) Set(val *CameraRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCameraRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCameraRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCameraRequest(val *CameraRequest) *NullableCameraRequest {
	return &NullableCameraRequest{value: val, isSet: true}
}

func (v NullableCameraRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCameraRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


