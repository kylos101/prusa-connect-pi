/*
connect-api

# API Rules * Null values are not sent / received. * Object IDs are **always** sent in list methods, but are **ignored** in create / update methods. * All request and response objects are at the root of the returned structure, if they contain only one entity. * Response of multiple entities is returned as an object that contains the list of entities and a structure `pager`, if necessary. ### Additional documentation: * [Camera registration](../camera_registration/) * [Camera communication](../camera_communication/) ### HTTP Status * 200 - OK, response contains data (usually the entire entity) * 201 - OK, entry created; response contains data as required * 204 - OK, no response * 304 - Response has not been modified * 400 - Invalid request / invalid input (SDK error) * 401 - Endpoint is being accessed without credentials (SDK error) * 403 - Request can't be served, usually due to insufficient rights (user error) * 404 - Entity not found (user error or outdated data) * 409 - Conflict with the state of target resource (user error) * 50x - Server side error

API version: 0.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CameraResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CameraResponse{}

// CameraResponse struct for CameraResponse
type CameraResponse struct {
	Id int32 `json:"id"`
	// Name defined by user
	Name *string `json:"name,omitempty"`
	Config *CameraConfig `json:"config,omitempty"`
	Options *CameraOptions `json:"options,omitempty"`
	Capabilities []string `json:"capabilities,omitempty"`
	// Team id. 0 is reserved for anonymous.
	TeamId int32 `json:"team_id"`
	// Printer UUID - can be found in the url in printer detail or in the printer settings tab
	PrinterUuid string `json:"printer_uuid" validate:"regexp=[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"`
	Token *string `json:"token,omitempty"`
	Origin CameraOrigin `json:"origin"`
	// Timestamp of camera deletion. Deleted cameras are listed only in job detail!
	Deleted *int32 `json:"deleted,omitempty"`
	// True if the registration process of camera is finished
	Registered bool `json:"registered"`
	// Sort order of the cameras per printer! For now it is not possible to change the camera's sort order
	SortOrder *int32 `json:"sort_order,omitempty"`
}

type _CameraResponse CameraResponse

// NewCameraResponse instantiates a new CameraResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCameraResponse(id int32, teamId int32, printerUuid string, origin CameraOrigin, registered bool) *CameraResponse {
	this := CameraResponse{}
	this.Id = id
	this.TeamId = teamId
	this.PrinterUuid = printerUuid
	this.Origin = origin
	this.Registered = registered
	return &this
}

// NewCameraResponseWithDefaults instantiates a new CameraResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCameraResponseWithDefaults() *CameraResponse {
	this := CameraResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CameraResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CameraResponse) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CameraResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CameraResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CameraResponse) SetName(v string) {
	o.Name = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CameraResponse) GetConfig() CameraConfig {
	if o == nil || IsNil(o.Config) {
		var ret CameraConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetConfigOk() (*CameraConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CameraResponse) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given CameraConfig and assigns it to the Config field.
func (o *CameraResponse) SetConfig(v CameraConfig) {
	o.Config = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CameraResponse) GetOptions() CameraOptions {
	if o == nil || IsNil(o.Options) {
		var ret CameraOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetOptionsOk() (*CameraOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CameraResponse) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given CameraOptions and assigns it to the Options field.
func (o *CameraResponse) SetOptions(v CameraOptions) {
	o.Options = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *CameraResponse) GetCapabilities() []string {
	if o == nil || IsNil(o.Capabilities) {
		var ret []string
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetCapabilitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *CameraResponse) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []string and assigns it to the Capabilities field.
func (o *CameraResponse) SetCapabilities(v []string) {
	o.Capabilities = v
}

// GetTeamId returns the TeamId field value
func (o *CameraResponse) GetTeamId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetTeamIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *CameraResponse) SetTeamId(v int32) {
	o.TeamId = v
}

// GetPrinterUuid returns the PrinterUuid field value
func (o *CameraResponse) GetPrinterUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrinterUuid
}

// GetPrinterUuidOk returns a tuple with the PrinterUuid field value
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetPrinterUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrinterUuid, true
}

// SetPrinterUuid sets field value
func (o *CameraResponse) SetPrinterUuid(v string) {
	o.PrinterUuid = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *CameraResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *CameraResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *CameraResponse) SetToken(v string) {
	o.Token = &v
}

// GetOrigin returns the Origin field value
func (o *CameraResponse) GetOrigin() CameraOrigin {
	if o == nil {
		var ret CameraOrigin
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetOriginOk() (*CameraOrigin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *CameraResponse) SetOrigin(v CameraOrigin) {
	o.Origin = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *CameraResponse) GetDeleted() int32 {
	if o == nil || IsNil(o.Deleted) {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetDeletedOk() (*int32, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *CameraResponse) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *CameraResponse) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetRegistered returns the Registered field value
func (o *CameraResponse) GetRegistered() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetRegisteredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registered, true
}

// SetRegistered sets field value
func (o *CameraResponse) SetRegistered(v bool) {
	o.Registered = v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *CameraResponse) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameraResponse) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *CameraResponse) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *CameraResponse) SetSortOrder(v int32) {
	o.SortOrder = &v
}

func (o CameraResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CameraResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	toSerialize["team_id"] = o.TeamId
	toSerialize["printer_uuid"] = o.PrinterUuid
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["origin"] = o.Origin
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	toSerialize["registered"] = o.Registered
	if !IsNil(o.SortOrder) {
		toSerialize["sort_order"] = o.SortOrder
	}
	return toSerialize, nil
}

func (o *CameraResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"team_id",
		"printer_uuid",
		"origin",
		"registered",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCameraResponse := _CameraResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCameraResponse)

	if err != nil {
		return err
	}

	*o = CameraResponse(varCameraResponse)

	return err
}

type NullableCameraResponse struct {
	value *CameraResponse
	isSet bool
}

func (v NullableCameraResponse) Get() *CameraResponse {
	return v.value
}

func (v *NullableCameraResponse) Set(val *CameraResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCameraResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCameraResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCameraResponse(val *CameraResponse) *NullableCameraResponse {
	return &NullableCameraResponse{value: val, isSet: true}
}

func (v NullableCameraResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCameraResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


