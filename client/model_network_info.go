/*
connect-api

# API Rules * Null values are not sent / received. * Object IDs are **always** sent in list methods, but are **ignored** in create / update methods. * All request and response objects are at the root of the returned structure, if they contain only one entity. * Response of multiple entities is returned as an object that contains the list of entities and a structure `pager`, if necessary. ### Additional documentation: * [Camera registration](../camera_registration/) * [Camera communication](../camera_communication/) ### HTTP Status * 200 - OK, response contains data (usually the entire entity) * 201 - OK, entry created; response contains data as required * 204 - OK, no response * 304 - Response has not been modified * 400 - Invalid request / invalid input (SDK error) * 401 - Endpoint is being accessed without credentials (SDK error) * 403 - Request can't be served, usually due to insufficient rights (user error) * 404 - Entity not found (user error or outdated data) * 409 - Conflict with the state of target resource (user error) * 50x - Server side error

API version: 0.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NetworkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInfo{}

// NetworkInfo Network information
type NetworkInfo struct {
	// Hardware address of ethernet port.
	LanMac *string `json:"lan_mac,omitempty"`
	// IPv4 address of ethernet port.
	LanIpv4 *string `json:"lan_ipv4,omitempty"`
	// IPv6 address of ethernet port.
	LanIpv6 *string `json:"lan_ipv6,omitempty"`
	// Hardware address of Wi-Fi device.
	WifiMac *string `json:"wifi_mac,omitempty"`
	// IPv4 address of Wi-Fi device.
	WifiIpv4 *string `json:"wifi_ipv4,omitempty"`
	// IPv6 address of Wi-Fi device.
	WifiIpv6 *string `json:"wifi_ipv6,omitempty"`
	// SSID of Wi-Fi network which is used by Wi-Fi device.
	WifiSsid *string `json:"wifi_ssid,omitempty"`
}

// NewNetworkInfo instantiates a new NetworkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInfo() *NetworkInfo {
	this := NetworkInfo{}
	return &this
}

// NewNetworkInfoWithDefaults instantiates a new NetworkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInfoWithDefaults() *NetworkInfo {
	this := NetworkInfo{}
	return &this
}

// GetLanMac returns the LanMac field value if set, zero value otherwise.
func (o *NetworkInfo) GetLanMac() string {
	if o == nil || IsNil(o.LanMac) {
		var ret string
		return ret
	}
	return *o.LanMac
}

// GetLanMacOk returns a tuple with the LanMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetLanMacOk() (*string, bool) {
	if o == nil || IsNil(o.LanMac) {
		return nil, false
	}
	return o.LanMac, true
}

// HasLanMac returns a boolean if a field has been set.
func (o *NetworkInfo) HasLanMac() bool {
	if o != nil && !IsNil(o.LanMac) {
		return true
	}

	return false
}

// SetLanMac gets a reference to the given string and assigns it to the LanMac field.
func (o *NetworkInfo) SetLanMac(v string) {
	o.LanMac = &v
}

// GetLanIpv4 returns the LanIpv4 field value if set, zero value otherwise.
func (o *NetworkInfo) GetLanIpv4() string {
	if o == nil || IsNil(o.LanIpv4) {
		var ret string
		return ret
	}
	return *o.LanIpv4
}

// GetLanIpv4Ok returns a tuple with the LanIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetLanIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.LanIpv4) {
		return nil, false
	}
	return o.LanIpv4, true
}

// HasLanIpv4 returns a boolean if a field has been set.
func (o *NetworkInfo) HasLanIpv4() bool {
	if o != nil && !IsNil(o.LanIpv4) {
		return true
	}

	return false
}

// SetLanIpv4 gets a reference to the given string and assigns it to the LanIpv4 field.
func (o *NetworkInfo) SetLanIpv4(v string) {
	o.LanIpv4 = &v
}

// GetLanIpv6 returns the LanIpv6 field value if set, zero value otherwise.
func (o *NetworkInfo) GetLanIpv6() string {
	if o == nil || IsNil(o.LanIpv6) {
		var ret string
		return ret
	}
	return *o.LanIpv6
}

// GetLanIpv6Ok returns a tuple with the LanIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetLanIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.LanIpv6) {
		return nil, false
	}
	return o.LanIpv6, true
}

// HasLanIpv6 returns a boolean if a field has been set.
func (o *NetworkInfo) HasLanIpv6() bool {
	if o != nil && !IsNil(o.LanIpv6) {
		return true
	}

	return false
}

// SetLanIpv6 gets a reference to the given string and assigns it to the LanIpv6 field.
func (o *NetworkInfo) SetLanIpv6(v string) {
	o.LanIpv6 = &v
}

// GetWifiMac returns the WifiMac field value if set, zero value otherwise.
func (o *NetworkInfo) GetWifiMac() string {
	if o == nil || IsNil(o.WifiMac) {
		var ret string
		return ret
	}
	return *o.WifiMac
}

// GetWifiMacOk returns a tuple with the WifiMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetWifiMacOk() (*string, bool) {
	if o == nil || IsNil(o.WifiMac) {
		return nil, false
	}
	return o.WifiMac, true
}

// HasWifiMac returns a boolean if a field has been set.
func (o *NetworkInfo) HasWifiMac() bool {
	if o != nil && !IsNil(o.WifiMac) {
		return true
	}

	return false
}

// SetWifiMac gets a reference to the given string and assigns it to the WifiMac field.
func (o *NetworkInfo) SetWifiMac(v string) {
	o.WifiMac = &v
}

// GetWifiIpv4 returns the WifiIpv4 field value if set, zero value otherwise.
func (o *NetworkInfo) GetWifiIpv4() string {
	if o == nil || IsNil(o.WifiIpv4) {
		var ret string
		return ret
	}
	return *o.WifiIpv4
}

// GetWifiIpv4Ok returns a tuple with the WifiIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetWifiIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.WifiIpv4) {
		return nil, false
	}
	return o.WifiIpv4, true
}

// HasWifiIpv4 returns a boolean if a field has been set.
func (o *NetworkInfo) HasWifiIpv4() bool {
	if o != nil && !IsNil(o.WifiIpv4) {
		return true
	}

	return false
}

// SetWifiIpv4 gets a reference to the given string and assigns it to the WifiIpv4 field.
func (o *NetworkInfo) SetWifiIpv4(v string) {
	o.WifiIpv4 = &v
}

// GetWifiIpv6 returns the WifiIpv6 field value if set, zero value otherwise.
func (o *NetworkInfo) GetWifiIpv6() string {
	if o == nil || IsNil(o.WifiIpv6) {
		var ret string
		return ret
	}
	return *o.WifiIpv6
}

// GetWifiIpv6Ok returns a tuple with the WifiIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetWifiIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.WifiIpv6) {
		return nil, false
	}
	return o.WifiIpv6, true
}

// HasWifiIpv6 returns a boolean if a field has been set.
func (o *NetworkInfo) HasWifiIpv6() bool {
	if o != nil && !IsNil(o.WifiIpv6) {
		return true
	}

	return false
}

// SetWifiIpv6 gets a reference to the given string and assigns it to the WifiIpv6 field.
func (o *NetworkInfo) SetWifiIpv6(v string) {
	o.WifiIpv6 = &v
}

// GetWifiSsid returns the WifiSsid field value if set, zero value otherwise.
func (o *NetworkInfo) GetWifiSsid() string {
	if o == nil || IsNil(o.WifiSsid) {
		var ret string
		return ret
	}
	return *o.WifiSsid
}

// GetWifiSsidOk returns a tuple with the WifiSsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetWifiSsidOk() (*string, bool) {
	if o == nil || IsNil(o.WifiSsid) {
		return nil, false
	}
	return o.WifiSsid, true
}

// HasWifiSsid returns a boolean if a field has been set.
func (o *NetworkInfo) HasWifiSsid() bool {
	if o != nil && !IsNil(o.WifiSsid) {
		return true
	}

	return false
}

// SetWifiSsid gets a reference to the given string and assigns it to the WifiSsid field.
func (o *NetworkInfo) SetWifiSsid(v string) {
	o.WifiSsid = &v
}

func (o NetworkInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LanMac) {
		toSerialize["lan_mac"] = o.LanMac
	}
	if !IsNil(o.LanIpv4) {
		toSerialize["lan_ipv4"] = o.LanIpv4
	}
	if !IsNil(o.LanIpv6) {
		toSerialize["lan_ipv6"] = o.LanIpv6
	}
	if !IsNil(o.WifiMac) {
		toSerialize["wifi_mac"] = o.WifiMac
	}
	if !IsNil(o.WifiIpv4) {
		toSerialize["wifi_ipv4"] = o.WifiIpv4
	}
	if !IsNil(o.WifiIpv6) {
		toSerialize["wifi_ipv6"] = o.WifiIpv6
	}
	if !IsNil(o.WifiSsid) {
		toSerialize["wifi_ssid"] = o.WifiSsid
	}
	return toSerialize, nil
}

type NullableNetworkInfo struct {
	value *NetworkInfo
	isSet bool
}

func (v NullableNetworkInfo) Get() *NetworkInfo {
	return v.value
}

func (v *NullableNetworkInfo) Set(val *NetworkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInfo(val *NetworkInfo) *NullableNetworkInfo {
	return &NullableNetworkInfo{value: val, isSet: true}
}

func (v NullableNetworkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


